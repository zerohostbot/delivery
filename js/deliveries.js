let deliveryMap;
let orders = [];
let courierMarkers = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const RESTAURANT_LOCATION = [55.753994, 37.622093]; // –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞ –ú–∞—Ä–æ—Å–µ–π–∫–µ
const DELIVERY_SPEED = 300; // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
const PHONE_NUMBER = '+7 (999) 123-45-67';
const ZOOM_LEVEL = 15; // –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
const COURIER_EMOJI = 'üöó'; // –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
function generateRandomRestaurant(deliveryLocation) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ~2–∫–º
    const offset = 0.02;
    const lat = deliveryLocation[0] + (Math.random() - 0.5) * offset;
    const lng = deliveryLocation[1] + (Math.random() - 0.5) * offset;
    
    return {
        location: [lat, lng]
    };
}

function initDeliveryMap() {
    deliveryMap = L.map('delivery-map').setView([55.76, 37.64], 11);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(deliveryMap);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫
    const deliveringOrders = orders.filter(o => o.status === 'delivering');
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    const markers = [];
    
    deliveringOrders.forEach(async (order) => {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(order.address)}&format=json`);
            const data = await response.json();
            
            if (data.length > 0) {
                const { lat, lon } = data[0];
                const marker = L.marker([lat, lon], {
                    icon: L.divIcon({
                        className: 'delivery-marker',
                        html: '<div class="marker-content">üöö</div>'
                    })
                }).addTo(deliveryMap);
                
                markers.push(marker);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ –Ω–∏–º
                if (markers.length > 0) {
                    const group = L.featureGroup(markers);
                    deliveryMap.fitBounds(group.getBounds().pad(0.1));
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
async function getRoute(from, to) {
    try {
        const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${from[1]},${from[0]};${to[1]},${to[0]}?overview=full&geometries=geojson`);
        const data = await response.json();
        return data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        return [from, to]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∑–∞–∫–∞–∑–∞
function updateDeliveryUI(orderId, newStatus) {
    const orderElement = document.querySelector(`[data-order-id="${orderId}"]`);
    if (!orderElement) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Å—Å–∏–≤–µ –∑–∞–∫–∞–∑–æ–≤
    const orderIndex = orders.findIndex(o => o.id === orderId);
    if (orderIndex !== -1) {
        orders[orderIndex].status = newStatus;
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        updateOrdersDisplay();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å—ã
    const progressLine = orderElement.querySelector('.progress-line-fill');
    const statusSteps = orderElement.querySelectorAll('.status-step');
    
    let progress = getDeliveryProgress(newStatus);
    progressLine.style.width = `${progress}%`;
    
    statusSteps.forEach((step, index) => {
        if (index * 33 <= progress) {
            step.classList.add('active');
            if (index * 33 < progress) {
                step.classList.add('completed');
            }
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
    orderElement.style.transition = 'all 0.5s ease';
}

// –û–±–Ω–æ–≤–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∑–∞–∫–∞–∑–æ–≤
function sortOrders(orders) {
    return orders.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        const statusOrder = {
            'processing': 0,
            'delivering': 1,
            'completed': 2
        };
        
        if (statusOrder[a.status] !== statusOrder[b.status]) {
            return statusOrder[a.status] - statusOrder[b.status];
        }
        
        // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        return new Date(b.date) - new Date(a.date);
    });
}

// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
function simulateDelivery(orderId, deliveryChain) {
    const statuses = ['processing', 'delivering', 'completed'];
    let currentStatusIndex = 0;

    const updateStatus = async () => {
        currentStatusIndex++;
        if (currentStatusIndex >= statuses.length) {
            return;
        }

        const newStatus = statuses[currentStatusIndex];
        const block = await deliveryChain.updateDeliveryStatus(orderId, newStatus);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ localStorage
        const orders = JSON.parse(localStorage.getItem('orders')) || [];
        const orderIndex = orders.findIndex(o => o.id === orderId);
        if (orderIndex !== -1) {
            orders[orderIndex].status = newStatus;
            localStorage.setItem('orders', JSON.stringify(orders));
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateDeliveryUI(orderId, newStatus);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏
        if (newStatus === 'delivering') {
            await simulateCourierMovement(orderId);
            // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É
            setTimeout(updateStatus, 2000);
        } else {
            setTimeout(updateStatus, 5000); // –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(updateStatus, 2000);
}

// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
function findNearestRestaurant(deliveryLocation) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    const restaurants = Array.from({ length: 3 }, () => generateRandomRestaurant(deliveryLocation));
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π
    return restaurants.reduce((nearest, restaurant) => {
        const distance = Math.sqrt(
            Math.pow(restaurant.location[0] - deliveryLocation[0], 2) +
            Math.pow(restaurant.location[1] - deliveryLocation[1], 2)
        );
        
        if (!nearest || distance < nearest.distance) {
            return { ...restaurant, distance };
        }
        return nearest;
    }, null);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
async function simulateCourierMovement(orderId) {
    const order = orders.find(o => o.id === orderId);
    if (!order) return;

    let deliveryLocation;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (order.coordinates) {
        deliveryLocation = [order.coordinates.lat, order.coordinates.lng];
    } else {
        try {
            const fullAddress = `–ú–æ—Å–∫–≤–∞, ${order.address}`;
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(fullAddress)}&format=json`);
            const data = await response.json();
            
            if (data.length > 0) {
                deliveryLocation = [parseFloat(data[0].lat), parseFloat(data[0].lon)];
            } else {
                console.warn('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
                deliveryLocation = [55.753994, 37.622093];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            deliveryLocation = [55.753994, 37.622093];
        }
    }

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    const nearestRestaurant = findNearestRestaurant(deliveryLocation);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    const route = await getRoute(nearestRestaurant.location, deliveryLocation);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫—É—Ä—å–µ—Ä–∞
    let courierMarker = courierMarkers.get(orderId);
    if (!courierMarker) {
        courierMarker = L.marker(nearestRestaurant.location, {
            icon: L.divIcon({
                className: 'courier-marker',
                html: '<div class="courier-icon">üöó</div>',
                iconSize: [40, 40],
                iconAnchor: [20, 20],
                popupAnchor: [0, -20]
            })
        }).addTo(deliveryMap);
        
        // –î–æ–±–∞–≤–∏–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        courierMarker.bindPopup('–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏');
        courierMarkers.set(orderId, courierMarker);
    }

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
    const routeLine = L.polyline(route, {
        color: '#2962FF',
        weight: 4,
        opacity: 0.8,
        className: 'courier-route'
    }).addTo(deliveryMap);

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    deliveryMap.fitBounds(routeLine.getBounds(), {
        padding: [50, 50],
        maxZoom: 15
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const restaurantMarker = L.marker(nearestRestaurant.location, {
        icon: L.divIcon({
            className: 'restaurant-marker',
            html: '<div class="marker-icon">üè™</div>',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        })
    }).addTo(deliveryMap)
    .bindPopup(nearestRestaurant.name);

    const destinationMarker = L.marker(deliveryLocation, {
        icon: L.divIcon({
            className: 'destination-marker',
            html: '<div class="marker-icon">üìç</div>',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        })
    }).addTo(deliveryMap)
    .bindPopup(order.address);

    // –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
    for (let i = 0; i < route.length; i++) {
        courierMarker.setLatLng(route[i]);
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        if (i < route.length - 1) {
            const angle = getAngle(route[i], route[i + 1]);
            const icon = courierMarker.getElement().querySelector('.courier-icon');
            if (icon) {
                icon.style.transform = `rotate(${angle}deg)`;
            }
        }

        // –°–ª–µ–¥–∏–º –∑–∞ –∫—É—Ä—å–µ—Ä–æ–º —Å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º
        deliveryMap.setView(route[i], ZOOM_LEVEL, {
            animate: true,
            duration: 1,
            easeLinearity: 0.5
        });

        await new Promise(resolve => setTimeout(resolve, DELIVERY_SPEED));
    }

    // –ü–ª–∞–≤–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    routeLine.setStyle({ opacity: 0 });
    setTimeout(() => {
        routeLine.remove();
        courierMarker.remove();
        restaurantMarker.remove();
        destinationMarker.remove();
        courierMarkers.delete(orderId);
    }, 500);

    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
function getAngle(from, to) {
    const dx = to[1] - from[1];
    const dy = to[0] - from[0];
    return Math.atan2(dx, dy) * 180 / Math.PI;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    orders = JSON.parse(localStorage.getItem('orders')) || [];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫—á–µ–π–Ω
    const deliveryChain = new DeliveryChain();

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    const deliveriesList = document.querySelector('.deliveries-list');
    
    if (orders.length === 0) {
        deliveriesList.innerHTML = `
            <div class="empty-deliveries">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∞–≤–æ–∫</p>
                <a href="index.html" class="primary-button">–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</a>
            </div>
        `;
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    orders = sortOrders(orders);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const groupedOrders = {
        processing: orders.filter(o => o.status === 'processing'),
        delivering: orders.filter(o => o.status === 'delivering'),
        completed: orders.filter(o => o.status === 'completed')
    };

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    deliveriesList.innerHTML = `
        ${groupedOrders.processing.length ? 
            createCollapsibleSection('processing', '–≥–æ—Ç–æ–≤—è—Ç—Å—è', renderOrders(groupedOrders.processing))
        : ''}
        
        ${groupedOrders.delivering.length ? 
            createCollapsibleSection('delivering', '–≤ –ø—É—Ç–∏', renderOrders(groupedOrders.delivering))
        : ''}
        
        ${groupedOrders.completed.length ? 
            createCollapsibleSection('completed', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', renderOrders(groupedOrders.completed))
        : ''}
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    initDeliveryMap();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    orders.forEach(order => {
        if (order.status !== 'completed') {
            simulateDelivery(order.id, deliveryChain);
        }
    });

    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
    const modeSwitch = document.getElementById('blockchainMode');
    
    modeSwitch.addEventListener('change', (e) => {
        document.body.classList.toggle('classic-mode', !e.target.checked);
        updateOrdersDisplay();
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–µ–∫—Ü–∏–π
function createCollapsibleSection(status, title, content) {
    const isExpanded = status === 'delivering' || status === 'processing';
    return `
        <div class="deliveries-section" data-status="${status}">
            <div class="section-header" onclick="toggleSection(this)">
                <h2>${title}</h2>
                <span class="toggle-icon">${isExpanded ? '‚ñº' : '‚ñ∂'}</span>
            </div>
            <div class="section-content ${isExpanded ? 'expanded' : ''}">
                ${content}
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏
function toggleSection(header) {
    const content = header.nextElementSibling;
    const icon = header.querySelector('.toggle-icon');
    const isExpanded = content.classList.contains('expanded');
    
    content.classList.toggle('expanded');
    icon.textContent = isExpanded ? '‚ñ∂' : '‚ñº';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤
function renderOrders(orders) {
    const isClassicMode = document.body.classList.contains('classic-mode');
    
    return orders.map(order => {
        const date = new Date(order.date);
        const formattedDate = date.toLocaleString('ru-RU', {
            day: 'numeric',
            month: 'long',
            hour: '2-digit',
            minute: '2-digit'
        });

        if (isClassicMode) {
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏–¥
            const totalPrice = Object.values(order.items)
                .reduce((sum, item) => sum + (item.price * item.quantity), 0);
            
            const estimatedDelivery = new Date(date.getTime() + 60 * 60 * 1000)
                .toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

            return `
                <div class="delivery-card" data-order-id="${order.id}">
                    <div class="delivery-order-info">
                        <h3>–∑–∞–∫–∞–∑ #${order.id}</h3>
                        <p>–∞–¥—Ä–µ—Å: ${order.address}</p>
                        <p>—Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalPrice} ‚ÇΩ</p>
                        <p>–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedDelivery}</p>
                        <div class="delivery-contact">
                            <p>—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫:</p>
                            <p>${PHONE_NUMBER}</p>
                        </div>
                    </div>
                    <div class="delivery-items">
                        ${Object.entries(order.items).map(([id, item]) => `
                            <div class="delivery-item">
                                <img src="${item.image}" alt="${item.name}">
                                <div class="delivery-item-info">
                                    <span class="delivery-item-name">${item.name}</span>
                                    <span class="delivery-item-quantity">√ó${item.quantity}</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        } else {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫—á–µ–π–Ω –≤–∏–¥
            const progress = getDeliveryProgress(order.status);
            
            return `
                <div class="delivery-card" data-order-id="${order.id}">
                    <div class="delivery-status-timeline">
                        <div class="progress-line">
                            <div class="progress-line-fill" style="width: ${progress}%"></div>
                        </div>
                        
                        <div class="status-step ${progress >= 0 ? 'active' : ''} ${progress >= 33 ? 'completed' : ''}">
                            <div class="status-icon">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 15.5H7.5C6.10444 15.5 5.40665 15.5 4.83886 15.6722C3.56045 16.06 2.56004 17.0605 2.17224 18.3389C2 18.9067 2 19.6044 2 21M19 21V15M16 18H22M14.5 7.5C14.5 9.98528 12.4853 12 10 12C7.51472 12 5.5 9.98528 5.5 7.5C5.5 5.01472 7.51472 3 10 3C12.4853 3 14.5 5.01472 14.5 7.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <div class="status-text">
                                –ø—Ä–∏–Ω—è—Ç
                                <div class="status-time">${formattedDate}</div>
                            </div>
                        </div>
                        
                        <div class="status-step ${progress >= 33 ? 'active' : ''} ${progress >= 66 ? 'completed' : ''}">
                            <div class="status-icon">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 15.5H7.5C6.10444 15.5 5.40665 15.5 4.83886 15.6722C3.56045 16.06 2.56004 17.0605 2.17224 18.3389C2 18.9067 2 19.6044 2 21M19 21V15M16 18H22M14.5 7.5C14.5 9.98528 12.4853 12 10 12C7.51472 12 5.5 9.98528 5.5 7.5C5.5 5.01472 7.51472 3 10 3C12.4853 3 14.5 5.01472 14.5 7.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <div class="status-text">
                                –≥–æ—Ç–æ–≤–∏—Ç—Å—è
                                ${progress >= 33 ? `<div class="status-time">21:37</div>` : ''}
                            </div>
                        </div>
                        
                        <div class="status-step ${progress >= 66 ? 'active' : ''} ${progress >= 100 ? 'completed' : ''}">
                            <div class="status-icon">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 15.5H7.5C6.10444 15.5 5.40665 15.5 4.83886 15.6722C3.56045 16.06 2.56004 17.0605 2.17224 18.3389C2 18.9067 2 19.6044 2 21M19 21V15M16 18H22M14.5 7.5C14.5 9.98528 12.4853 12 10 12C7.51472 12 5.5 9.98528 5.5 7.5C5.5 5.01472 7.51472 3 10 3C12.4853 3 14.5 5.01472 14.5 7.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <div class="status-text">
                                –≤ –ø—É—Ç–∏
                                ${progress >= 66 ? `<div class="status-time">21:45</div>` : ''}
                            </div>
                        </div>
                        
                        <div class="status-step ${progress >= 100 ? 'active completed' : ''}">
                            <div class="status-icon">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 15.5H7.5C6.10444 15.5 5.40665 15.5 4.83886 15.6722C3.56045 16.06 2.56004 17.0605 2.17224 18.3389C2 18.9067 2 19.6044 2 21M19 21V15M16 18H22M14.5 7.5C14.5 9.98528 12.4853 12 10 12C7.51472 12 5.5 9.98528 5.5 7.5C5.5 5.01472 7.51472 3 10 3C12.4853 3 14.5 5.01472 14.5 7.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <div class="status-text">
                                –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                                ${progress >= 100 ? `<div class="status-time">22:00</div>` : ''}
                            </div>
                        </div>
                    </div>
                    
                    <div class="delivery-info">
                        <p class="delivery-date">${formattedDate}</p>
                        <p class="delivery-address">${order.address}</p>
                        <div class="delivery-items">
                            ${Object.entries(order.items).map(([id, item]) => `
                                <div class="delivery-item">
                                    <img src="${item.image}" alt="${item.name}">
                                    <div class="delivery-item-info">
                                        <span class="delivery-item-name">${item.name}</span>
                                        <span class="delivery-item-quantity">√ó${item.quantity}</span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
    }).join('');
}

function getDeliveryProgress(status) {
    switch (status) {
        case 'processing': return 33;
        case 'delivering': return 66;
        case 'completed': return 100;
        default: return 0;
    }
}

class DeliveryChain extends Blockchain {
    constructor() {
        super();
        this.difficulty = 1; // –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    }

    async createDeliveryBlock(order) {
        await this.addTransaction(
            'store',
            order.address,
            order.items,
            order.status
        );
        await this.minePendingTransactions();
        return this.getLatestBlock();
    }

    async updateDeliveryStatus(orderId, newStatus) {
        const block = await this.createDeliveryBlock({
            id: orderId,
            status: newStatus,
            timestamp: Date.now()
        });
        return block;
    }
}

// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateOrdersDisplay() {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    orders = sortOrders(orders);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
    localStorage.setItem('orders', JSON.stringify(orders));
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    const groupedOrders = {
        processing: orders.filter(o => o.status === 'processing'),
        delivering: orders.filter(o => o.status === 'delivering'),
        completed: orders.filter(o => o.status === 'completed')
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º DOM
    const deliveriesList = document.querySelector('.deliveries-list');
    deliveriesList.innerHTML = `
        ${groupedOrders.processing.length ? 
            createCollapsibleSection('processing', '–≥–æ—Ç–æ–≤—è—Ç—Å—è', renderOrders(groupedOrders.processing))
        : ''}
        
        ${groupedOrders.delivering.length ? 
            createCollapsibleSection('delivering', '–≤ –ø—É—Ç–∏', renderOrders(groupedOrders.delivering))
        : ''}
        
        ${groupedOrders.completed.length ? 
            createCollapsibleSection('completed', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', renderOrders(groupedOrders.completed))
        : ''}
    `;
} 